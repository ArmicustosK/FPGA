/*lab3
 Kai Kang
*/


module lab3(input button1, input button2, input dip, input clk, output [1:0]q_sig)
ram	ram_inst (
	.address ( address_sig ),
	.clock ( clk),
	.data ( data_sig ),
	.wren ( dip ),
	.q ( q_sig )
	);
	

reg [4:0] address_sig;
reg [1:0] data_sig;


	
always@(negedge button1 or posedge button2) //clear and increase address
		begin
			
			if(!button1)
			address_sig = 5'b00000;
			
			else
			address_sig = address_sig + 1'b1;
			
		end
		
		
always@(posedge dip or negedge button2) //write and read, dip =1 write, =0 read
		begin
			if (dip && !button2) begin//write
				data_sig[0] = address_sig[0];	//LSB
				data_sig[1] = address_sig[0] ^ address_sig[1] ^ address_sig[2] ^ address_sig[3] ^ address_sig[4];	//XOR
				address_sig = data_sig;
			end
			
			else if (!dip && !button2)	begin//read
				data_sig = address_sig;
				q_sig = data_sig;
			end
			
		end
		
		
		
		
endmodule
